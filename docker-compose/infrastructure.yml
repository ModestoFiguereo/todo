version: '3'

networks:
  todo:
    driver: bridge

services:
  # Relational Databases
  # ============================================================================

  # mysql
  mysql:
    image: mysql:8.0.11
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: yourStrong(!)Password*
    container_name: todo-mysql
    networks:
      todo:
        aliases:
          - mysql
  # mssql
  mssql:
    image: microsoft/mssql-server-linux:2017-latest
    restart: always
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: yourStrong(!)Password*
    container_name: todo-mssql
    ports:
      - 1433:1433
    networks:
      todo:
        aliases:
          - mssql

  # mariadb
  mariadb:
    image: mariadb:10.3.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: yourStrong(!)Password*
    container_name: todo-mariadb
    networks:
      todo:
        aliases:
          - mariadb

  # postgres
  postgres:
    image: postgres:9.5
    restart: always
    environment:
      POSTGRES_USER: me
      POSTGRES_PASSWORD: yourStrong(!)Password*
    container_name: todo-postgres
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      todo:
        aliases:
          - postgres

  # Document Databases
  # ============================================================================

  # mongo
  mongo:
    image: mongo:3.6
    command: mongod --storageEngine wiredTiger
    restart: always
    container_name: todo-mongo
    ports:
      - 27017:27017
    networks:
      todo:
        aliases:
          - mongo

  # couchdb
  couchdb:
    image: couchdb:2.1.1
    restart: always
    container_name: todo-couchdb
    networks:
      todo:
        aliases:
          - couchdb

  # Graph Databases
  # ============================================================================

  # neo4j
  neo4j:
    image: neo4j:3.4.0
    restart: always
    environment:
      NEO4J_AUTH: neo4j/yourStrong(!)Password*
    container_name: todo-neo4j
    ports:
      - 7474:7474
      - 7687:7687
    networks:
      todo:
        aliases:
          - neo4j

  # key Value Databases
  # ============================================================================

  # redis
  redis:
    image: redis
    restart: always
    container_name: todo-redis
    ports:
      - 6379:6379
    networks:
      todo:
        aliases:
          - redis

  # riak
  riak-coordinator:
    image: basho/riak-kv
    restart: always
    container_name: todo-riak-coordinator
    ports:
      - "8087:8087"
      - "8098:8098"
    environment:
      - CLUSTER_NAME=riakkv
    labels:
      - "com.basho.riak.cluster.name=riakkv"
    networks:
      todo:
        aliases:
          - riak-coordinator

  riak-member:
    image: basho/riak-kv
    restart: always
    container_name: todo-riak-member
    ports:
      - "8087"
      - "8098"
    labels:
      - "com.basho.riak.cluster.name=riakkv"
    depends_on:
      - riak-coordinator
    environment:
      - CLUSTER_NAME=riakkv
      - COORDINATOR_NODE=riak-coordinator
    networks:
      todo:
        aliases:
          - riak-member

  # Wide Column Databases
  # ============================================================================

  # cassandra
  cassandra:
    image: cassandra:2.1.20
    restart: always
    container_name: todo-cassandra
    networks:
      todo:
        aliases:
          - cassandra

  # API Gateway
  # ============================================================================

  # kong-create-database
  kong-create-database:
    image: postgres:9.5
    environment:
      POSTGRES_USER: me
      PGPASSWORD: yourStrong(!)Password*
    container_name: todo-kong-create-database
    depends_on:
      - postgres
    volumes:
      - ./scripts/:/scripts/
    command: psql -h 'postgres' -U me postgres -f /scripts/create-kong-db.sql
    networks:
      todo:

  # Initialize Postgres schema.
  kong-migration:
    image: kong:0.13
    container_name: todo-kong-migration
    depends_on:
      - postgres
      - kong-create-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: me
      KONG_PG_PASSWORD: yourStrong(!)Password*
    command: kong migrations up --v
    networks:
      todo:

  # kong
  kong:
    image: kong:0.13
    container_name: todo-kong
    depends_on:
      - postgres
      - kong-create-database
      - kong-migration
    ports:
      - 8000:8000
      - 8443:8443
      - 8001:8001
      - 8444:8444
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: me
      KONG_PG_PASSWORD: yourStrong(!)Password*
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_LISTEN_SSL: 0.0.0.0:8444
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://0.0.0.0:8001 || exit 1"]
      interval: 5s
      retries: 10
    networks:
      todo:
        aliases:
          - kong

  # Kong Dashboard
  kong-dashboard:
    image: pgbi/kong-dashboard:v2
    restart: always
    container_name: todo-kong-dashboard
    ports:
      - 8080:8080
    networks:
      todo:
        aliases:
          - kong-dashboard
